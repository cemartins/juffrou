<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0">
	<articleinfo>
		<title>Three Minute Tutorial</title>
		<author>
			<firstname>Carlos</firstname>
			<surname>Martins</surname>
		</author>
	</articleinfo>
	<section>
		<title>Three Minute Tutorial</title>
		<section>
			<title>Getting started</title>
			<para>Getting to work with juffrou-xml is very easy. This is how you
				get the XML representation of an object:</para>
			<para>First create a couple of java beans and fill up some of their properties
			</para>
<programlisting language="java">
	Person person = new Person();
	person.setFirstName("Carlos");
	person.setLastName("Martins");
	person.setBirthDay(new SimpleDateFormat("yyyy-MM-dd").parse("1967-10-01"));
	
	Address address = new Address();
	address.setStreet("Bean street, No 1");
	address.setCity("Lisboa");

	person.setHome(address);
</programlisting>
			<para>Then instantiate Juffrou-xml and marshal the java bean</para>
<programlisting language="java">
	JuffrouXml juffrouXml = new JuffrouXml();
	String xmlString = juffrouXml.toXml(person);
</programlisting>
			<para>The output will be the following XML:</para>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<net.sf.juffrou.xml.test.dom.Person>
  <firstName>Carlos</firstName>
  <lastName>Martins</lastName>
  <birthDay>10/1/67 12:00 AM</birthDay>
  <home>
    <street>Bean street, No 1</street>
    <city>Lisboa</city>
  </home>
</net.sf.juffrou.xml.test.dom.Person>
]]></programlisting>
<para>To unmarshal an object back from XML is also straight forward:</para>
<programlisting language="java">
	Person person = (Person) juffrouXml.fromXml(xmlString);
</programlisting>
</section>
<section><title>Adjusting the output</title>

<para>Registering the person bean will allow you to also define its xml element name</para>
<programlisting language="java">
	JuffrouXml juffrouXml = new JuffrouXml();
	juffrouXml.registerRootElement(Person.class, "Person");
	
	String xmlString = juffrouXml.toXml(person);
</programlisting>
<para>The output will now be:</para>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Person>
  <firstName>Carlos</firstName>
  <lastName>Martins</lastName>
  <birthDay>10/1/67 12:00 AM</birthDay>
  <home>
    <street>Bean street, No 1</street>
    <city>Lisboa</city>
  </home>
</Person>
]]></programlisting>

<para>To have the birth day date displayed in simple date format, create a custom serializer:
<programlisting language="java">
public class SimpleDateSerializer implements Serializer {

	private final SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
	
	@Override
	public void serialize(JuffrouWriter writer, BeanWrapper valueOwner, String valuePropertyName) {
		writer.write(formatter.format((Date)valueOwner.getValue(valuePropertyName)));
	}

	@Override
	public void deserialize(JuffrouReader reader, BeanWrapper valueOwner, String valuePropertyName) {
		String value = reader.getText();
		try {
			valueOwner.setValue(valuePropertyName, formatter.parse(value));
		} catch (ParseException e) {
		}
	}
}</programlisting>
and just register the corresponding bean property:</para>
<programlisting language="java">
	JuffrouXml juffrouXml = new JuffrouXml();
	juffrouXml.registerRootElement(Person.class, "Person");
	juffrouXml.registerSerializer("simpledate", new SimpleDateSerializer());
	juffrouXml.registerElement(Person.class, "birthDay", "birthDay", "simpledate");
	
	String xmlString = juffrouXml.toXml(person);
</programlisting>
<para>The output will now be:</para>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Person>
  <firstName>Carlos</firstName>
  <lastName>Martins</lastName>
  <birthDay>1967-10-01</birthDay>
  <home>
    <street>Bean street, No 1</street>
    <city>Lisboa</city>
  </home>
</Person>
]]></programlisting>
</section>

<section><title>Simplified marshalling</title>
<para>Simplified marshalling is the possibility of marshalling nested beans into a "flat" XML structure like this: imagine that you don't want the whole home address marshalled for this person. You only want his home city 
and you want it displayed as it were a simple property of person.</para>
<para>Easy! All you have to do is this:</para>
<programlisting language="java">
	JuffrouXml juffrouXml = new JuffrouXml();
	juffrouXml.registerRootElement(Person.class, "Person");
	juffrouXml.registerElement(Person.class, "home.city", "homeTown", null);
	String xmlString = juffrouXml.toXml(person);
</programlisting>
<para>The output will now be:</para>
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Person>
  <firstName>Carlos</firstName>
  <lastName>Martins</lastName>
  <birthDay>1967-10-01</birthDay>
  <homeTown>Lisboa</homeTown>
</Person>
]]></programlisting>
<para>Of course this XML will also be unmarshalled back to a person object. That person object will have a home with city Lisboa.</para>
</section>
<section>
<title>Using a mapping file to configure Juffrou-XML</title>
<para>
Juffrou-XML can also be configured using mapping files.</para>
<para>To demonstrate lets do the equivalent configuration of the prior examples. Create a file called<filename>juffrou-xml-mapping.xml</filename>
with the following contents:
<programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<mapping>

	<serializer id="simpledate" class="net.sf.juffrou.xml.test.dom.SimpleDateSerializer" />
	
	<root-element xml="Person" type="net.sf.juffrou.xml.test.dom.Person">
		<element property="firstName" />
		<element property="lastName" />
		<element property="birthDay">
			<serializer ref="simpledate" />
		</element>
		<element property="home.city" xml="homeTown" />
	</root-element>
	
	<root-element xml="Person" type="net.sf.juffrou.xml.test.dom.Address" />
	
</mapping>]]></programlisting>
<caption>By not specifying any of the Address' properties to marshal, all will be marshalled</caption>
</para>
<para>To instantiate Juffrou-xml now we use another constructor:</para>
<programlisting language="java"><![CDATA[
	JuffrouXml juffrouXml = new JuffrouXml("classpath:juffrou-xml-mapping.xml");
	String xmlString = juffrouXml.toXml(person);
]]></programlisting>
		</section>
	</section>
</article>
