<?xml version="1.0" encoding="UTF-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0">
		<articleinfo>
			<title>1 Minute Tutorial</title>
			<author>
				<firstname>Carlos</firstname>
				<surname>Martins</surname>
			</author>
		</articleinfo>
		<section>
			<title>1 Minute Tutorial</title>
			<section>
			<title>Getting started</title>
			<para>Getting to work with juffrou-xml is very easy. This is how you get the XML representation of an object:</para>
			<para>First create a java bean and fill up some of its properties</para>
			<programlisting>
 Person person = new Person();
 person.setFirstName("Carlos");
 person.setLastName("Martins");
 person.setBirthDay(new SimpleDateFormat("yyyy-MM-dd").parse("1967-10-01"));
  			</programlisting>
  			<para>Then instantiate Juffrou-xml and marshall the java bean</para>
			<programlisting>
 JuffrouXml juffrouXml = new JuffrouXml();
 String xmlString = juffrouXml.toXml(person);
 			</programlisting>
  			<para>The output will be the following XML:</para>
			<programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<net.sf.juffrou.xml.test.dom.Person>
  <firstName>Carlos</firstName>
  <lastName>Martins</lastName>
  <birthDay>10/1/67 12:00 AM</birthDay>
</net.sf.juffrou.xml.test.dom.Person>
]]></programlisting>
		<para>And the other way around is also straight forward:</para>
			<programlisting>
 Person person = (Person) juffrouXml.fromXml(xmlString);
  			</programlisting>
  			</section>
  			<section>
  			<title>The power of mapping configuration</title>
  			<para>With a mapping file we can tune things up. Create a file called <filename>juffrou-xml-mapping.xml</filename> with the following contents:
 			<programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<mapping>

	<root-element xml="Person" type="net.sf.juffrou.xml.test.dom.Person" />
	
</mapping>]]></programlisting>
<caption>By not specifying any of the persons properties to marshal, all of them will be marshalled</caption>
</para>
  			<para>To instantiate Juffrou-xml now we use another constructor:</para>
			<programlisting>
 JuffrouXml juffrouXml = new JuffrouXml("classpath:juffrou-xml-mapping.xml");
 String xmlString = juffrouXml.toXml(person);
 			</programlisting>
<para>
			The XML output now will be:
			<programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Person>
  <firstName>Carlos</firstName>
  <lastName>Martins</lastName>
  <birthDay>10/1/67 12:00 AM</birthDay>
</Person>
]]></programlisting>
  			</para>

<para>By specifying the properties in Person that we want marshalled, we can also specify a simple date format for the birthday, like so:
<programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<mapping>

	<root-element xml="Person" type="net.sf.juffrou.xml.test.dom.Person">
		<element property="firstName" />
		<element property="lastName" />
		<element property="birthDay">
			<serializer ref="simpledate" />
		</element>
	</root-element>
	
</mapping>]]></programlisting>
The XML output now will be:
<programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<Person>
  <firstName>Carlos</firstName>
  <lastName>Martins</lastName>
  <birthDay>1967-10-01</birthDay>
</Person>
]]></programlisting>
  			</para>

  			</section>
  			<section>
  			<title>Marshalling nested properties</title>
  			<para>
  			</para>
  			</section>
		</section>
</article>
