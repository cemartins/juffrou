<?xml version="1.0" encoding="UTF-8"?>
<book xmlns="http://docbook.org/ns/docbook" version="5.0"
	xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Juffrou-Reflect Reference Documentation</title>
	<subtitle><?eval ${project.version}?></subtitle>
	<info>
	<releaseinfo>This document refers to version <?eval ${project.version}?> of the <?eval ${project.name}?>.</releaseinfo>
<legalnotice><para>Copies of this document may be made for your own use and for distribution to others, provided
that you do not charge any fee for such copies and further provided that each copy contains this
Copyright Notice, whether distributed in print or electronically.</para></legalnotice>
		<author>
			<personname>
				<firstname>Carlos</firstname>
				<surname>Martins</surname>
			</personname>
		</author>
	</info>
	<chapter xml:id="reflect_ref_chpt_01">
		<title>Getting Started</title>
		<section>
			<title>Introduction</title>
			<para>Juffrou-reflect is focused on reflection, bean introspection and manipulation through property names.</para>
		</section>
		<section>
			<title>Installing</title>
			<section>
				<title>Maven projects</title>
				<para>To start using Juffrou-XML in your maven project just add the following dependency:
<programlisting language="xml"><![CDATA[
	<dependency>
		<groupId>net.sf.juffrou</groupId>
		<artifactId>juffrou-reflect</artifactId>
		<version>]]><?eval ${project.version}?><![CDATA[</version>
	</dependency>

]]></programlisting>
This will allow you access the source code of the library as well as the javadoc files, if you have checked the options "download artifact sources" and "download atifact javadoc in your IDE."
				</para>
			</section>
			<section>
				<title>Non maven projects</title>
					<para>Download the file <filename>juffrou-<?eval ${project.version}?>-bundle.zip</filename> from the <ulink url="http://juffrou.sourceforge.net"><citetitle>website</citetitle></ulink> and extract it's contents to a temporary directory.</para>
					<para>Add <filename>juffrou-reflect-<?eval ${project.version}?>.jar</filename> to the classpath of your project and you are good to go.</para>
			</section>
		</section>
	</chapter>
	<chapter xml:id="reflect_ref_chpt_02">
		<title>Using</title>
		<section>
			<title>BeanWrapper</title>
			<para>BeanWrapper is the object that wraps around your beans and allows you to inspect them through the names of their properties. You can access the wrapped bean's properties and also the properties of beans referenced by them.</para>
			<figure xml:id="ClassDiagram"><title>Example class diagram</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/ClassDiagram.PNG" format="PNG" />
				</imageobject>
			</mediaobject>
			</figure>
			<para><xref linkend="ClassDiagram" /> shows one class Person which has 3 simple attributes and one attribute of type Address. The Address class is also shown and has two simple attributes.
			</para>
			A tipical use of BeanWrapper could be:
			<programlisting language="java">
			BeanWrapper bw = new BeanWrapper(Person.class); <co xml:id="inst_co"  linkends="inst" />
			bw.setValue("firstName", "Carlos"); <co xml:id="firstname_co"  linkends="firstname" />
			bw.setValue("home.city", "Lisboa"); <co xml:id="city_co"  linkends="city" />
			</programlisting>
<calloutlist>
  <callout arearefs="inst_co" xml:id="inst" >
    <para>Instantiate BeanWrapper around a Person class</para>
  </callout>
  <callout arearefs="firstname_co" xml:id="firstname">
    <para>Set the firstName property of Person with the value "Carlos".</para>
  </callout>
  <callout arearefs="city_co" xml:id="city">
    <para>Set the home property of Person with a new instance of an Address class and set the city property of Address to the value "Lisboa".</para>
  </callout>
  <remark>Note: you can create a BeanWrapper around a class or around an object instance.</remark>
  <para>When the program executes <computeroutput>bw.setValue("firstName", "Carlos");</computeroutput> the bean wrapper creates an instance of Person. And when it
  executes <computeroutput>bw.setValue("home.city", "Lisboa");</computeroutput> it will instantiate an Address class, set the value of the property <userinput>home</userinput> in Person to the Address object and set the value of the property <userinput>city</userinput> in Address to "Lisboa".</para>
  <para>Sometimes you want to have control over bean instantiation and would like to set some "preferences" over how BeanWrapper behaves. This is where the BeanWrapperContext comes in.</para>
</calloutlist>
		</section>
		
		<?hard-pagebreak?>
		<section>
			<title>BeanWrapperContext</title>
			<para>The BeanWrapperContext is the object that holds metadata for a BeanWrapper. This metadata is composed by data collected through class introspection and by preferences that the programmer defines.</para>
			<para>If you instantiate a BeanWrapper using the default constructor, it will create a new BeanWrapperContext. But if you instantiate a BeanWrapper by passing a BeanWrapperContext, no introspection overhead is needed.</para>
			<para>With BeanWrapperContext you can define a class that will be called to instantiate the wrapped class. To do this, first create a class that implements the interface <computeroutput>BeanInstanceCreator</computeroutput>. See the following example:</para>
			<programlisting language="java">
		BeanInstanceCreator iCreator = new BeanInstanceCreator() {
			@Override
			public Object newBeanInstance() throws BeanInstanceCreatorException {
				Programmer programmer = new Programmer();
				programmer.setLastName("Smith");
				return programmer;
			}
		};
		BeanWrapperContext context = new BeanWrapperContext(Programmer.class);
		context.setBeanInstanceCreator(iCreator);
		BeanWrapper bw = new BeanWrapper(context);
		bw.setValue("firstName", "John");
		Programmer programmer = (Programmer) bw.getBean();
		Assert.assertEquals("John", programmer.getFirstName());
		Assert.assertEquals("Smith", programmer.getLastName());
			</programlisting>
		</section>
		<section>
			<title>BeanConverter</title>
			<para>The BeanConverter is a utility class to convert between two beans.</para>
			<para>Given any two beans and a map that establishes which properties in bean 1 correspond to properties in bean 2, this class can be used to automatically obtain bean 1 from an instance of bean 2 and vice-versa.</para>
		</section>
	</chapter>
</book>
