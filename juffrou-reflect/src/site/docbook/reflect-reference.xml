<?xml version="1.0" encoding="UTF-8"?>
<book xmlns="http://docbook.org/ns/docbook" version="5.0"
	xmlns:xi="http://www.w3.org/2001/XInclude">
	<title>Juffrou-Reflect Reference Documentation</title>
	<subtitle><?eval ${project.version}?></subtitle>
	<info>
	<releaseinfo>This document refers to version <?eval ${project.version}?> of the <?eval ${project.name}?>.</releaseinfo>
<legalnotice><para>Copies of this document may be made for your own use and for distribution to others, provided
that you do not charge any fee for such copies and further provided that each copy contains this
Copyright Notice, whether distributed in print or electronically.</para></legalnotice>
		<author>
			<personname>
				<firstname>Carlos</firstname>
				<surname>Martins</surname>
			</personname>
		</author>
	</info>
	<chapter xml:id="reflect_ref_chpt_01">
		<title>Getting Started with Juffrou-reflect</title>
		<section>
			<title>Introduction</title>
			<para>Juffrou-reflect is focused on reflection, and offers a very performant bean wrapper allowing bean introspection and manipulation through property names.</para>
		</section>
		<section>
			<title>Installing</title>
			<section>
				<title>Maven projects</title>
				<para>To start using Juffrou-XML in your maven project just add the following dependency:
<programlisting language="xml"><![CDATA[
	<dependency>
		<groupId>net.sf.juffrou</groupId>
		<artifactId>juffrou-reflect</artifactId>
		<version>]]><?eval ${project.version}?><![CDATA[</version>
	</dependency>

]]></programlisting>
This will allow you access the source code of the library as well as the javadoc files, if you have checked the options "download artifact sources" and "download atifact javadoc in your IDE."
				</para>
			</section>
			<section>
				<title>Non maven projects</title>
					<para>Download the file <filename>juffrou-<?eval ${project.version}?>-bundle.zip</filename> from the <ulink url="http://juffrou.sourceforge.net"><citetitle>website</citetitle></ulink> and extract it's contents to a temporary directory.</para>
					<para>Add <filename>juffrou-reflect-<?eval ${project.version}?>.jar</filename> to the classpath of your project and you are good to go.</para>
			</section>
		</section>
	</chapter>
	<chapter xml:id="reflect_ref_chpt_02">
		<title>Using Juffrou-reflect</title>
		<section>
			<title>BeanWrapper</title>
			<para>BeanWrapper is the object that wraps around your beans and allows you to inspect them through the names of their properties. You can access the wrapped bean's properties and also the properties of beans referenced by them.</para>
			<figure xml:id="ClassDiagram"><title>Example class diagram</title>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/ClassDiagram.PNG" format="PNG" />
				</imageobject>
			</mediaobject>
			</figure>
			<para><xref linkend="ClassDiagram" /> shows one class Person with three simple attributes and one attribute of type Address. The Address class is also shown and has two simple attributes.</para>
			<remark>Person and Address will be used extensively throughout this manual in code examples.</remark>
			A tipical use of BeanWrapper could be:
			<programlisting language="java">
			BeanWrapper bw = new BeanWrapper(Person.class); <co xml:id="inst_co"  linkends="inst" />
			bw.setValue("firstName", "Carlos"); <co xml:id="firstname_co"  linkends="firstname" />
			bw.setValue("home.city", "Lisboa"); <co xml:id="city_co"  linkends="city" />
			Person person = (Person) bw.getBean(); <co xml:id="getBean_co"  linkends="getBean" />
			</programlisting>
<remark>Note: you can create a BeanWrapper around a class or around an object instance.</remark>
<calloutlist>
  <callout arearefs="inst_co" xml:id="inst" >
    <para>Instantiate BeanWrapper around a Person class</para>
  </callout>
  <callout arearefs="firstname_co" xml:id="firstname">
    <para>Set the firstName property of Person with the value "Carlos".</para>
  </callout>
  <callout arearefs="city_co" xml:id="city">
    <para>Set the home property of Person with a new instance of an Address class and set the city property of Address to the value "Lisboa".</para>
  </callout>
  <callout arearefs="getBean_co" xml:id="getBean">
    <para>Get the instance of the wrapped object.</para>
  </callout>
</calloutlist>
  <para>When the program executes <literal>bw.setValue("firstName", "Carlos");</literal> the bean wrapper creates an instance of Person. And when it
  executes <computeroutput>bw.setValue("home.city", "Lisboa");</computeroutput> it will instantiate an Address class, set the value of the property <userinput>city</userinput> in Address to "Lisboa" and set the value of the property <userinput>home</userinput> in Person to the created Address instance.</para>
  
  <section><title>Setting Bean Property Values</title>
  <para>When you execute the method <literal>bw.setValue("birthDay", someObject)</literal> to set the value of the birthDay property, the BeanWrapper expects <literal>someObject</literal> to be of the same type as the bean property (in this case Date). And if it is not, it will throw an IllegalArgumentException exception.</para>
  <para>But if you use the method <literal>setValueOfString("birthDay", "1967-10-01")</literal>, then the BeanWrapper will try to convert the string value into the type of the property before setting it.</para>
  </section>
  
  <section><title>Nested BeanWrappers</title>
  	<para>When you access a nested property (i.e. a property of a nested bean), like in the case of <computeroutput>bw.setValue("home.city", "Lisboa")</computeroutput>, the BeanWraper automatically creates another BeanWrapper around the nested bean. In this case around an Address bean. This is called a nested bean wrapper.</para>
  	<para>Nested BeanWrappers are created only when referenced by <computeroutput>beanWrapper.getValue</computeroutput>, <computeroutput>beanWrapper.setValue</computeroutput>, <computeroutput>beanWrapper.getType</computeroutput>, <computeroutput>beanWrapper.getClass</computeroutput> or <computeroutput>beanWrapper.getNestedWrapper</computeroutput>.</para>
  	<para>You can get a specific nested bean wrapper with the method <computeroutput>beanWrapper.getNestedWrapper("home")</computeroutput> and you can get all current nested bean wrappers with the method <computeroutput>beanWrapper.getNestedWrappers()</computeroutput>.</para>
  	<para>If you want to change the wrapped instance without creating a new BeanWrapper you can call <literal>bw.setBean(newInstance)</literal> and if you want to zero all properties of the wrapped instance you can call <literal>bw.reset()</literal>, which is the same as calling <literal>bw.setBean(null)</literal>.</para>
  </section>
  <?dbfo-need height="4cm" ?> <!-- Conditional page break -->
  <para>In case you don't know the details of the Wrapped object, you can inquire the BeanWrapper:</para>
<example><title>Inquiring the BeanWrapper:</title>
	<programlisting language="java">
		BeanWrapperContext context = BeanWrapperContext.create(Programmer.class);
		BeanWrapper beanWrapper = new BeanWrapper(context);
		for(String propertyName : beanWrapper.getPropertyNames()) {
			Type type = beanWrapper.getType(propertyName);
			Object value = beanWrapper.getValue(propertyName);
			System.out.println(type + ": " + value);
		}
	</programlisting>
</example>
  
  <para>Sometimes you want to have control over bean instantiation and would like to set some "preferences" over how BeanWrapper behaves. This is where the BeanWrapperContext comes in.</para>
		<!-- <?hard-pagebreak?>  --> <!-- Conditional page break -->
		<section>
			<title>BeanWrapperContext</title>
			<para>The BeanWrapperContext is the object that holds metadata for a BeanWrapper. This metadata is composed by data collected through class introspection, including the references to the getter and setter methods of the class and all classes it extends.</para>
			<para>If you instantiate a BeanWrapper using the default constructor, it will create a new BeanWrapperContext. But if you instantiate a BeanWrapper by passing a BeanWrapperContext, no introspection overhead is needed.</para>
			<table><title>time in milliseconds to handle 10.000 BeanWrapers</title>
				<tgroup cols='3' align='left' colsep='1' rowsep='1'>
				<thead>
				<row>
				  <entry>Mode</entry>
				  <entry>Instantiation only</entry>
				  <entry>With property setting</entry>
				</row>
				</thead>
				<tbody>
					<row>
						<entry>Spring Framework's BeanWrapperImpl</entry><entry>73</entry><entry>329</entry>
					</row>
					<row>
						<entry>Juffrou BeanWrapper</entry><entry>57</entry><entry>165</entry>
					</row>
					<row>
						<entry>Juffrou BeanWrapper with BeanWrapperContext</entry><entry>1</entry><entry>17</entry>
					</row>
					<row>
						<entry>Juffrou BeanWrapper with BeanWrapperFactory</entry><entry>4</entry><entry>20</entry>
					</row>
				</tbody>
				</tgroup>
			</table>
			<remark>JDK 6 build 35 running on a Windows 7 32bit (Intel i3 2,93GHz with 4GB ram) machine</remark>
			<para>When a BeanWrapper creates a nested BeanWrapper it also creates a nested BeanWrapperContext, of course. But it will only create one BeanWrapperContext per property type, so, for instance, if you have a BeanWrapper around a class Person with two properties (home and work) of type Address, you can have two nested BeanWrappers (one for home and another for work), but only one nested BeanWrapperContext.</para>
			<para>You can obtain the BeanWrapperContext of a BeanWrapper at any time calling the method <literal>beanWrapper.getContext()</literal>.</para>
			<section><title>Controling bean instantiation</title>
			<para>With BeanWrapperContext you can define a class that will be called to instantiate the wrapped class as well as the classes of the nested beans whenever they need to be instantiated. To do this, first create a class that implements the interface <computeroutput>BeanInstanceBuilder</computeroutput>. See the following example:</para>
			<programlisting language="java">
		BeanInstanceBuilder iCreator = new BeanInstanceBuilder() {
			@Override
			public Object build(Class clazz) throws BeanInstanceBuilderException {
				Programmer programmer = new Programmer();
				programmer.setLastName("Smith");
				return programmer;
			}
		};
		BeanWrapperContext context = BeanWrapperContext.create(Programmer.class);
		context.setBeanInstanceBuilder(iCreator);
		BeanWrapper bw = new BeanWrapper(context);
		bw.setValue("firstName", "John");
		Programmer programmer = (Programmer) bw.getBean();
		Assert.assertEquals("John", programmer.getFirstName());
		Assert.assertEquals("Smith", programmer.getLastName());
			</programlisting>
			<para>You might also want to associate more information with a bean than the introspection information collected by the BeanWrapperContext.
			For instance you might want add information to help represent the bean in XML format (like Juffrou-XML does). This is where the BeanWrapperFactory comes in.</para>
			</section>

			<section><title>BeanWrapperFactory</title>
			<para>The BeanWrapperFactory is the object responsible for creating all the BeanWrapperContexts. It does mainly three things:</para>
	<itemizedlist mark="disc">
<listitem>Keeps track of the BeanWrapperContexts it creates, so it doesn't create two BeanWrapperContexts for the same bean class.</listitem>
<listitem>Injects itself into the BeanWrapperContexts it creates, so that they can use the same factory to create their nested BeanWrapperContexts.</listitem>
<listitem>Gives out BeanWrapperContexts upon call to <literal>factory.getBeanWrapperContext(Person.class)</literal> method. The BeanWrapperContext will only be created in none exists for the specified class (in this case Person.class).</listitem>
</itemizedlist>
			<para>In fact you can also use the BeanWrapperFactory to instantiate BeanWrappers using the methods <literal>factory.getBeanWrapper(Person.class)</literal> or <literal>factory.getBeanWrapper(personIntance)</literal> for example. This is as fast as instantiating a BeanWrapper with a BeanWrapperContext parameter.</para>
			</section>
			<section><title>Extending the BeanWrapperContext</title>			
			<para>So if you want to extend the BeanWrapperContext and add to the bean metadata all you have to do is create a class that extends BeanWrapperContext and "tell" the BeanWrapperFactory to instantiate your class instead of BeanWrapperContext.</para>
			<example><title>Class that extends BeanWrapperContext</title>
			<programlisting language="java"><![CDATA[
public class MyBeanWrapperContext extends BeanWrapperContext {

	//TODO create properties to extend the context
	
	public MyBeanWrapperContext(BeanWrapperFactory<MyBeanWrapperContext> factory, 
													 Class clazz, Type... types) {
		super(factory, clazz, types);
		//TODO some initialization
	}
}
			]]></programlisting>
			</example>
			<para>And how do we "tell" the BeanWrapperFactory to use this as BeanWrapperContext? Easy. We create a class that implements <emphasis>BeanContextBuilder</emphasis> like this one:</para>
			<programlisting language="java"><![CDATA[
public class MyContextBuilder implements BeanContextBuilder<MyBeanWrapperContext> {

	@Override
	public MyBeanWrapperContext build(
						BeanWrapperFactory<MyBeanWrapperContext> hierarchyContext, 
						Class clazz, Type... types) {

		MyBeanWrapperContext context = new MyBeanWrapperContext(hierarchyContext, 
																		clazz, types);
		return context;
	}
}
			]]></programlisting>
			<para>And then we "tell" BeanWrapperFactory to use this builder. See the example bellow:</para>
			<example><title>Using a custom BeanWrapperContext</title>
			<programlisting><![CDATA[
		BeanWrapperFactory<MyBeanWrapperContext> factory = 
								new BeanWrapperFactory<MyBeanWrapperContext>();
		factory.setBeanContextBuilder(new MyContextBuilder());
		BeanWrapper myPersonWrapper = factory.getBeanWrapper(Person.class);
		MyBeanWrapperContext context = (MyBeanWrapperContext) myPersonWrapper
																.getContext();
			]]></programlisting>
			</example>
			</section>
		</section>
	</section>

		<section>
			<title>BeanConverter</title>
			<para>The BeanConverter is a utility class to convert between two beans.</para>
			<para>Given any two beans and a map that establishes which properties in bean 1 correspond to properties in bean 2, this class can be used to automatically obtain bean 1 from an instance of bean 2 and vice-versa.</para>
		</section>
	</chapter>
</book>
